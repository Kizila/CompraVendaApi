// <auto-generated />
using System;
using CompraVendaApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompraVendaApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CompraVendaApi.Models.Apresentacao", b =>
                {
                    b.Property<int>("apresentacao_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("apresentacao_id");

                    b.ToTable("Apresentacaos");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Armazem", b =>
                {
                    b.Property<int>("armazem_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("loja_id")
                        .HasColumnType("int");

                    b.Property<int>("ordem")
                        .HasColumnType("int");

                    b.Property<bool>("vende")
                        .HasColumnType("bit");

                    b.HasKey("armazem_id");

                    b.ToTable("Armazems");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Categoria", b =>
                {
                    b.Property<int>("categoria_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("categoria_id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("CompraVendaApi.Models.CentroCusto", b =>
                {
                    b.Property<int>("centro_custo_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("centro_custo_parent_id")
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("designacao")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("loja_id")
                        .HasColumnType("int");

                    b.Property<string>("notas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("centro_custo_id");

                    b.HasIndex("centro_custo_parent_id");

                    b.ToTable("CentroCustos");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Documento", b =>
                {
                    b.Property<int>("documento_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("designacao")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("documento_parent_id")
                        .HasColumnType("int");

                    b.Property<string>("notas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("documento_id");

                    b.HasIndex("documento_parent_id");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Entidade", b =>
                {
                    b.Property<int>("entidade_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("contribuinte")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("designacao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("morada")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("segmento_id")
                        .HasColumnType("int");

                    b.Property<string>("telefone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("tipo_entidade")
                        .HasColumnType("int");

                    b.HasKey("entidade_id");

                    b.ToTable("Entidades");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Fornecedor", b =>
                {
                    b.Property<int>("fornecedor_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("condicoes_pagemento_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("desconto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("entidade_id")
                        .HasColumnType("int");

                    b.Property<int?>("imposto_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("saldo_actual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("saldo_limite")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("fornecedor_id");

                    b.HasIndex("entidade_id");

                    b.HasIndex("imposto_id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Fornecedor_Encomenda", b =>
                {
                    b.Property<int>("encomenda_fornecedor_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<int>("armazem_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("condicoes_pagemento_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("documento_ano")
                        .HasColumnType("int");

                    b.Property<int>("documento_cambio")
                        .HasColumnType("int");

                    b.Property<string>("documento_data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("documento_estado")
                        .HasColumnType("int");

                    b.Property<int>("documento_id")
                        .HasColumnType("int");

                    b.Property<int>("documento_numero")
                        .HasColumnType("int");

                    b.Property<string>("documento_referencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("documento_total_desconto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("documento_total_imposto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("documento_total_mercadoria")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("documento_total_valor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("fornecedor_id")
                        .HasColumnType("int");

                    b.Property<int>("loja_id")
                        .HasColumnType("int");

                    b.Property<int>("moeda_id")
                        .HasColumnType("int");

                    b.Property<string>("notas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("encomenda_fornecedor_id");

                    b.HasIndex("armazem_id");

                    b.HasIndex("fornecedor_id");

                    b.ToTable("Fornecedor_Encomenda");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Fornecedor_Encomenda_linha", b =>
                {
                    b.Property<int>("encomenda_fornecedor_linha_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<int?>("apresentacao_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("desconto1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("desconto2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("desconto_cabecalho")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("encomenda_fornecedor_id")
                        .HasColumnType("int");

                    b.Property<int?>("estado_entrega")
                        .HasColumnType("int");

                    b.Property<decimal?>("impostoValor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("imposto_id")
                        .HasColumnType("int");

                    b.Property<short>("order")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("produto_id")
                        .HasColumnType("int");

                    b.Property<int?>("qtd_apresentacao")
                        .HasColumnType("int");

                    b.Property<decimal?>("total_desconto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("total_imposto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("total_mercadoria")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("total_valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("encomenda_fornecedor_linha_id");

                    b.HasIndex("apresentacao_id");

                    b.HasIndex("encomenda_fornecedor_id");

                    b.HasIndex("imposto_id");

                    b.HasIndex("produto_id");

                    b.ToTable("Fornecedor_Encomenda_linha");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Imposto", b =>
                {
                    b.Property<int>("imposto_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("padrao")
                        .HasColumnType("bit");

                    b.Property<decimal>("percentagem")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("imposto_id");

                    b.ToTable("Impostos");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Localizacao", b =>
                {
                    b.Property<int>("localizacao_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("localizacao_parent")
                        .HasColumnType("int");

                    b.Property<int>("loja_id")
                        .HasColumnType("int");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("localizacao_id");

                    b.ToTable("Localizacaos");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Marca", b =>
                {
                    b.Property<int>("marca_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("marca_id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Produto", b =>
                {
                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<int>("apresentacao_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("bundle")
                        .HasColumnType("bit");

                    b.Property<int>("categoria_id")
                        .HasColumnType("int");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codigo_barra")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("controla_serial_no")
                        .HasColumnType("bit");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("imposto_id")
                        .HasColumnType("int");

                    b.Property<int>("marca_id")
                        .HasColumnType("int");

                    b.Property<bool>("move_stock")
                        .HasColumnType("bit");

                    b.Property<decimal>("preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("preco_custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("tipo_artigo")
                        .HasColumnType("bit");

                    b.HasKey("product_id");

                    b.HasIndex("apresentacao_id");

                    b.HasIndex("categoria_id");

                    b.HasIndex("imposto_id");

                    b.HasIndex("marca_id");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Produto_Nivel_Stock", b =>
                {
                    b.Property<int>("nivel_stock_id")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<int>("armazem_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("produto_id")
                        .HasColumnType("int");

                    b.Property<int>("quantidade")
                        .HasColumnType("int");

                    b.Property<int>("quantidade_bundle")
                        .HasColumnType("int");

                    b.HasKey("nivel_stock_id");

                    b.HasIndex("armazem_id");

                    b.HasIndex("produto_id");

                    b.ToTable("ProdutoNivelStocks");
                });

            modelBuilder.Entity("CompraVendaApi.Models.ProdutoBundle", b =>
                {
                    b.Property<int>("product_id_bundle")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<bool>("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("atualizado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("atualizado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("criado_data")
                        .HasColumnType("datetime2");

                    b.Property<string>("criado_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("product_id_bundle_include")
                        .HasColumnType("int");

                    b.Property<int>("quantidade")
                        .HasColumnType("int");

                    b.HasKey("product_id_bundle");

                    b.HasIndex("product_id");

                    b.ToTable("ProdutoBundles");
                });

            modelBuilder.Entity("CompraVendaApi.Models.CentroCusto", b =>
                {
                    b.HasOne("CompraVendaApi.Models.CentroCusto", "centro_custo_parent")
                        .WithMany("centro_custo_parents")
                        .HasForeignKey("centro_custo_parent_id");

                    b.Navigation("centro_custo_parent");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Documento", b =>
                {
                    b.HasOne("CompraVendaApi.Models.Documento", "documento_parent")
                        .WithMany("documento_parents")
                        .HasForeignKey("documento_parent_id");

                    b.Navigation("documento_parent");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Fornecedor", b =>
                {
                    b.HasOne("CompraVendaApi.Models.Entidade", "entidade")
                        .WithMany("fornecedores")
                        .HasForeignKey("entidade_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompraVendaApi.Models.Imposto", "imposto")
                        .WithMany("fornecedores")
                        .HasForeignKey("imposto_id");

                    b.Navigation("entidade");

                    b.Navigation("imposto");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Fornecedor_Encomenda", b =>
                {
                    b.HasOne("CompraVendaApi.Models.Armazem", "armazem")
                        .WithMany("fornecedor_encomendas")
                        .HasForeignKey("armazem_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompraVendaApi.Models.Documento", "documento")
                        .WithMany("fornecedor_encomendas")
                        .HasForeignKey("armazem_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompraVendaApi.Models.Fornecedor", "fornecedor")
                        .WithMany("fornecedor_encomendas")
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("armazem");

                    b.Navigation("documento");

                    b.Navigation("fornecedor");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Fornecedor_Encomenda_linha", b =>
                {
                    b.HasOne("CompraVendaApi.Models.Apresentacao", "apresentacao")
                        .WithMany("fornecedor_encomenda_linhas")
                        .HasForeignKey("apresentacao_id");

                    b.HasOne("CompraVendaApi.Models.Fornecedor_Encomenda", "encomenda_fornecedor")
                        .WithMany("fornecedor_encomenda_linhas")
                        .HasForeignKey("encomenda_fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompraVendaApi.Models.Imposto", "imposto")
                        .WithMany("fornecedor_encomenda_linhas")
                        .HasForeignKey("imposto_id");

                    b.HasOne("CompraVendaApi.Models.Produto", "produto")
                        .WithMany("fornecedor_encomenda_linhas")
                        .HasForeignKey("produto_id");

                    b.Navigation("apresentacao");

                    b.Navigation("encomenda_fornecedor");

                    b.Navigation("imposto");

                    b.Navigation("produto");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Produto", b =>
                {
                    b.HasOne("CompraVendaApi.Models.Apresentacao", "Apresentacao")
                        .WithMany("Produtos")
                        .HasForeignKey("apresentacao_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompraVendaApi.Models.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("categoria_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompraVendaApi.Models.Imposto", "Imposto")
                        .WithMany("Produtos")
                        .HasForeignKey("imposto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompraVendaApi.Models.Marca", "Marca")
                        .WithMany("Produtos")
                        .HasForeignKey("marca_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apresentacao");

                    b.Navigation("Categoria");

                    b.Navigation("Imposto");

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Produto_Nivel_Stock", b =>
                {
                    b.HasOne("CompraVendaApi.Models.Armazem", "Armazem")
                        .WithMany("produto_nivel_stocks")
                        .HasForeignKey("armazem_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompraVendaApi.Models.Produto", "produto")
                        .WithMany("produto_nivel_stocks")
                        .HasForeignKey("produto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armazem");

                    b.Navigation("produto");
                });

            modelBuilder.Entity("CompraVendaApi.Models.ProdutoBundle", b =>
                {
                    b.HasOne("CompraVendaApi.Models.Produto", "Produto")
                        .WithMany("product_bundle")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Apresentacao", b =>
                {
                    b.Navigation("Produtos");

                    b.Navigation("fornecedor_encomenda_linhas");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Armazem", b =>
                {
                    b.Navigation("fornecedor_encomendas");

                    b.Navigation("produto_nivel_stocks");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("CompraVendaApi.Models.CentroCusto", b =>
                {
                    b.Navigation("centro_custo_parents");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Documento", b =>
                {
                    b.Navigation("documento_parents");

                    b.Navigation("fornecedor_encomendas");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Entidade", b =>
                {
                    b.Navigation("fornecedores");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Fornecedor", b =>
                {
                    b.Navigation("fornecedor_encomendas");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Fornecedor_Encomenda", b =>
                {
                    b.Navigation("fornecedor_encomenda_linhas");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Imposto", b =>
                {
                    b.Navigation("Produtos");

                    b.Navigation("fornecedor_encomenda_linhas");

                    b.Navigation("fornecedores");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Marca", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("CompraVendaApi.Models.Produto", b =>
                {
                    b.Navigation("fornecedor_encomenda_linhas");

                    b.Navigation("product_bundle");

                    b.Navigation("produto_nivel_stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
